{"version":3,"sources":["redux/ducks/user.js","redux/ducks/selectors.js","components/RepositoryList.jsx","components/GithubSearch.jsx","App.js","redux/store/index.js","index.js"],"names":["fetchUsersApi","usersSaga","getUsersSaga","rootSaga","FETCH_USERS","FETCH_USERS_SUCCESS","setUsers","payload","type","initialState","user","loading","url","fetch","req","json","res","call","result","put","takeLatest","all","getUsers","state","RepositoryList","repository","Grid","className","item","xs","md","Typography","variant","List","length","map","ListItem","ListItemIcon","ListItemText","primary","name","id","GithubSearch","dispatch","useDispatch","useSelector","useState","value","setValue","TextField","label","onChange","e","target","Button","color","onClick","setTimeout","App","sagaMiddleware","createSagaMiddleware","reducer","combineReducers","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAsCUA,G,WAOAC,G,WAKAC,G,WAKOC,GAtDXC,EAAc,cACdC,EAAsB,sBAOfC,EAAW,SAAAC,GAAO,MAAK,CAClCC,KAAMH,EACNE,QAASA,IAGEE,EAAe,CAC1BC,KAAM,GACNC,SAAS,GAsBX,SAAUX,EAAV,gFAEc,OAFYO,EAA1B,EAA0BA,QAClBK,EADR,uCAC8CL,EAD9C,mBAEoBM,MAAMD,GAF1B,OAGc,OADNE,EAFR,gBAGoBA,EAAIC,OAHxB,cAGQC,EAHR,yBAISA,GAJT,uCAOA,SAAUf,EAAUM,GAApB,uEACiB,OADjB,SACuBU,YAAKjB,EAAcO,GAD1C,OAEI,OADIW,EADR,gBAEUC,YAAIb,EAASY,GAAU,KAFjC,uCAKA,SAAUhB,IAAV,iEACE,OADF,SACQkB,YAAWhB,EAAYH,GAD/B,uCAKO,SAAUE,IAAV,iEACL,OADK,SACCkB,YAAI,CACRnB,MAFG,uCCvDA,IAAMoB,EAAW,SAAAC,GAAK,OAAIA,EAAMb,KAAKA,M,qFCM/Bc,EAAiB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAC9B,OACE,eAACC,EAAA,EAAD,CAAMC,UAAU,qBAAqBC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAtD,UACE,cAACC,EAAA,EAAD,CAAYJ,UAAU,QAAQK,QAAQ,KAAtC,0BAGA,8BACE,cAACC,EAAA,EAAD,UACGR,EAAWS,OAAST,EAAWU,KAAI,SAAAP,GAAI,OACtC,eAACQ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CACEC,QAASX,EAAKY,MACTZ,EAAKa,UAEC,aCfdC,EAAe,WAC1B,IAAMC,EAAWC,cACXlC,EAAOmC,YAAYvB,GAFO,EAINwB,mBAAS,IAJH,mBAIzBC,EAJyB,KAIlBC,EAJkB,KAYhC,OACE,qCACE,sBAAKrB,UAAU,YAAf,UACE,cAACsB,EAAA,EAAD,CACER,GAAG,iBACHS,MAAM,WACNH,MAAOA,EACPf,QAAQ,WACRmB,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAON,QACjCpB,UAAU,qBAEZ,cAAC2B,EAAA,EAAD,CAAQ3B,UAAU,mBAAmBK,QAAQ,WAAWuB,MAAM,UAAUC,QAjB1D,WAClBC,YAAW,WACTd,EHZgC,CACpCnC,KAAMJ,EACNG,QGUwBwC,MACpB,MAcE,uBAEF,cAAC,EAAD,CAAgBtB,WAAYf,QCtBnBgD,EARH,WACV,OACE,mCACE,cAAC,EAAD,O,gBCAAC,EAAiBC,cAEjBC,EAAUC,YAAgB,CAC9BpD,KLUyB,WAA4C,IAA3Ca,EAA0C,uDAAlCd,EAAkC,yCAAnBD,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,QACvD,OAAQC,GACN,KAAKJ,EACH,OAAO,2BACFmB,GADL,IAEEZ,SAAS,IAEb,KAAKN,EACH,OAAO,2BACFkB,GADL,IAEEb,KAAMH,EACNI,SAAS,IAGb,QACE,OAAOY,MKtBAwC,EAAQC,YAAYH,EAASI,YACxCC,YAAgBP,GAChBQ,OAAOC,8BAAgCD,OAAOC,iCAEhDT,EAAeU,IAAIlE,GCTnBmE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,W","file":"static/js/main.7e533ba7.chunk.js","sourcesContent":["import { put, all, call, takeLatest } from 'redux-saga/effects';\r\nconst FETCH_USERS = 'FETCH_USERS';\r\nconst FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\n\r\nexport const fetchUsers = payload => ({\r\n  type: FETCH_USERS,\r\n  payload: payload\r\n});\r\n\r\nexport const setUsers = payload => ({\r\n  type: FETCH_USERS_SUCCESS,\r\n  payload: payload\r\n});\r\n\r\nexport const initialState = {\r\n  user: [],\r\n  loading: false\r\n};\r\n\r\nexport const githubUsers = (state = initialState, {type, payload}) => {\r\n  switch (type) {\r\n    case FETCH_USERS:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: payload,\r\n        loading: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction* fetchUsersApi({ payload }) {\r\n  const url = `https://api.github.com/users/${payload}/repos`;\r\n  const req = yield fetch(url);\r\n  const res = yield req.json();\r\n  return res\r\n}\r\n\r\nfunction* usersSaga(payload) {\r\n  const result = yield call(fetchUsersApi,payload);\r\n    yield put(setUsers(result || []))\r\n}\r\n\r\nfunction* getUsersSaga() {\r\n  yield takeLatest(FETCH_USERS,usersSaga)\r\n}\r\n\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    getUsersSaga(),\r\n  ]);\r\n}\r\n","export const getUsers = state => state.user.user;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Typography, Grid, ListItem, ListItemIcon, ListItemText, List} from '@material-ui/core';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport '../style/style.scss';\r\n\r\nexport const RepositoryList = ({repository}) => {\r\n  return (\r\n    <Grid className='wrapper-repository' item xs={12} md={6}>\r\n      <Typography className='title' variant=\"h6\">\r\n        Repositories\r\n      </Typography>\r\n      <div>\r\n        <List>\r\n          {repository.length ? repository.map(item =>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <FolderIcon/>\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={item.name}\r\n                key={item.id}\r\n              />\r\n            </ListItem>) : null\r\n          }\r\n        </List>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nRepositoryList.propTypes = {\r\n  repository: PropTypes.arrayOf(PropTypes.instanceOf(Object)),\r\n};\r\n","import React, { useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { fetchUsers } from '../redux/ducks/user';\r\nimport { getUsers } from '../redux/ducks/selectors';\r\nimport { RepositoryList } from './RepositoryList';\r\nimport '../style/style.scss';\r\n\r\nexport const GithubSearch = () => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(getUsers);\r\n\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleClick = () => {\r\n    setTimeout(() => {\r\n      dispatch(fetchUsers(value))\r\n    },2000)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"NickName\"\r\n          value={value}\r\n          variant=\"outlined\"\r\n          onChange={e => setValue(e.target.value)}\r\n          className='container__field'\r\n        />\r\n        <Button className='container__field' variant=\"outlined\" color=\"primary\" onClick={handleClick}>Search</Button>\r\n      </div>\r\n      <RepositoryList repository={user}/>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport { GithubSearch } from './components/GithubSearch';\n\nconst App = () => {\n  return (\n    <>\n      <GithubSearch/>\n    </>\n  );\n};\n\nexport default App;\n","import {createStore, applyMiddleware, combineReducers, compose} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport { rootSaga } from '../ducks/user';\r\nimport { githubUsers } from '../ducks/user';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst reducer = combineReducers({\r\n  user: githubUsers\r\n});\r\n\r\nexport const store = createStore(reducer, compose(\r\n  applyMiddleware(sagaMiddleware),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\nsagaMiddleware.run(rootSaga);\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}